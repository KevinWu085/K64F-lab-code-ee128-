/*
 * Copyright (c) 2015, Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "fsl_device_registers.h"
static int i = 0;
const unsigned char decoder[] =  {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x67 };
uint32_t count = 0;
uint32_t outval;
uint32_t inputRegister = 0;

unsigned short adc_read16b(){
	ADC0_SC1A = 0x00;
	while(ADC0_SC2 & ADC_SC2_ADACT_MASK);
	while(!(ADC0_SC1A & ADC_SC1_COCO_MASK));
	return ADC0_RA;
}

void PORTA_IRQHandler(void)
{

	//Read Port B

	inputRegister = GPIOB_PDIR;
	//if (MODE_SW is 0) /* ADC Mode */
	if((inputRegister & 0x8) == 0){
		//Read from ADC and convert to decimal value; (e.g., ADC reads 0xFF, voltage is 1.6)
		outval = (adc_read16b()* 33) / 0xFFFF;

	}
	//if(MODE_SW is 1) /* Count Mode */
	else
	{
		//if (CNT_DIR is 0) /* Count Direction */
		if((inputRegister & 0x04)== 1){
			//count down to 0 and roll over to 99
			count--;
			if (count < 0){
				count = 99;
			}
		}
//		if((inputRegister & 0x04) == 0){
//			//count up to 99 and roll over to 0
//			count++;
//			if (count > 99){
//				count = 0;
//			}
//		}
		//if(CNT_DIR is 1)

		outval = count;
	}
	//Display ADC value or Counter value based on MODE_SW; /* PORT C and D to seven segments */
	GPIOC_PCOR = 0xBF;
	GPIOD_PCOR = 0xFF;

	GPIOC_PSOR = (decoder[outval / 10] & 0x3F) | ((decoder[outval / 10] & 0x40) << 1);
	GPIOD_PSOR = decoder[outval % 10];
	//Clear ISFR
	PORTA_ISFR = (1 << 1);
}

void delay(){
	for(i = 0; i < 500000; i++);
	//PORTA_IRQHandler();
}

int main(void)
{

	//Enable Port A, B, C, D, and ADC0 clock gating.
	SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
	SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
	SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK;
	SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK;
	SIM_SCGC6 |= SIM_SCGC6_ADC0_MASK;
	//Configure PA1, PB[10, 3:2], PC[8:7, 5:0], PD[7:0] for GPIO.
	PORTA_PCR4 = 0x0100;  //port a
	PORTB_GPCLR = 0x0000C0100;  //port b
	PORTC_GPCLR = 0x01BF0100;  //port c
	PORTD_GPCLR = 0x00FF0100;  //port d
	//Configure PA1 to trigger interrupts on falling edge input.
	PORTA_PCR1 = 0xA0100;
	//Configure ADC for 16 bits, and to use bus clock.
	ADC0_CFG1 = 0x0C;
	//Disable the ADC module;
	ADC0_SC1A = 0x1F;
	//Set PB[3:2] and PA[1] for input;
	GPIOA_PDDR |= (0 << 1);  // PA[1] input
	GPIOB_PDDR |= ((0 << 3) | (0 << 2) | (1 <<2) | (1 << 10)); // PB[3:2] input
	//Set PD[7:0], PB[10] and PC[8:7,5:0] for output;
	GPIOC_PDDR |= 0x000001BF;  // port c output
	GPIOD_PDDR |= 0x000000FF; // port d output

//	//Read Port B
//	uint32_t count = 0;
//	uint32_t outval;
//	uint32_t inputRegister = 0;
//	inputRegister = GPIOB_PDIR;
	//count up to 99 and roll over to 0
//	while(1){
//		count += 1;
//		if (count >= 99){
//			count = 0;
//		}					//if(CNT_DIR is 1)
//		outval = count;
//		GPIOC_PCOR = 0xBF;
//		GPIOD_PCOR = 0xFF;
//		PORTA_ISFR = (1 << 1);
//		GPIOC_PSOR = (decoder[outval / 10] & 0x3F) | ((decoder[outval / 10] & 0x40) << 1);
//		GPIOD_PSOR = decoder[outval % 10];
//		delay();
//
//	}


	//Clear PORTA ISFR
	PORTA_ISFR = (1 << 1);
	//Enable Port A IRQ interrupts;
	NVIC_EnableIRQ(PORTA_IRQn);


	for(;;){
		GPIOB_PTOR |= (1 << 10);
		PORTA_IRQHandler();
		delay();

	}
	return 0;
}

////////////////////////////////////////////////////////////////////////////////
// EOF
////////////////////////////////////////////////////////////////////////////////
